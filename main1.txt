#include "raylib.h"
#include <stdio.h>

void DrawSquare(int posX, int posY, int size, Color color){
    return DrawRectangle(posX, posY, size, size, color);
}

int IsHigherOrLower(int num1, int num2){
    if (num1 > num2){
        return 1;
    } else if (num1 < num2){
        return -1;
    } else {
        return 0;
    }
}

int tileSize = 64;

struct Block {
    int x, y;
    int timer;
} playerBox = {320, 256, 0};

struct Entity {
    int x, y;
    int speed;
} player = {320, 256, 2};

struct Portals {
    int x1, y1;
    int x2, y2;
} portals = {9*64, 4*64, 4*64, 12*64};

enum Direction {
    NONE,
    UP,
    DOWN,
    RIGHT,
    LEFT,
} currentDirection;

struct Block crateBox = {192, 448, 0};
struct Entity crate = {192, 448, 2};

int main(){
    InitWindow(800, 600, "Hello World");

    Camera2D camera = { 0 };
    camera.offset = (Vector2){ 800/2, 600/2};
    camera.zoom = 1;

    int cols, rows;
    cols = rows = 0;
    char ch;

    FILE *file_ptr;
    file_ptr = fopen("map.txt", "r");

    while ((ch = fgetc(file_ptr)) != EOF) {
        if (ch == '\n'){
            rows++;
            cols = 0;
        } else {
            cols++;
        }
    }

    char map[rows][cols];
    cols = rows = 0;

    rewind(file_ptr);

    while ((ch = fgetc(file_ptr)) != EOF) {
        if (ch == '\n'){
            rows++;
            cols = 0;
        } else {
            map[rows][cols] = ch;
            cols++;
        }
    }

    fclose(file_ptr);

    Image image = LoadImage("images/Wall.png");
    ImageResizeNN(&image, image.width * 2, image.height * 2);
    Texture2D texture = LoadTextureFromImage(image);
    SetTextureFilter(texture, TEXTURE_FILTER_POINT);
    UnloadImage(image);

    Image image1 = LoadImage("images/Player Sprites.gif");
    ImageResizeNN(&image1, image1.width * 2, image1.height * 2);
    Texture2D texture1 = LoadTextureFromImage(image1);
    SetTextureFilter(texture1, TEXTURE_FILTER_POINT);
    UnloadImage(image1);

    while(!WindowShouldClose()){
        BeginDrawing();
        ClearBackground(GREEN);
        SetTargetFPS(60);

        camera.target = (Vector2){ player.x + 32.0f, player.y + 32.0f };

        BeginMode2D(camera);

        for (int i = 0; i < rows; i++){
            for (int j = 0; j < cols; j++){
                if (map[i][j] == '1')
                    DrawTexture(texture, 64*j, 64*i, BROWN);
            }
        }

        DrawSquare(playerBox.x, playerBox.y, tileSize, GRAY);
        DrawSquare(crateBox.x, crateBox.y, tileSize, YELLOW);
        DrawSquare(crate.x, crate.y, tileSize, BROWN);
        DrawSquare(portals.x1, portals.y1, tileSize, BLUE);
        DrawSquare(portals.x2, portals.y2, tileSize, BLUE);
        DrawTexture(texture1, player.x, player.y, RED);

        player.speed = crate.speed = 2 * (IsKeyDown(KEY_LEFT_SHIFT) + 1);

        if (!playerBox.timer){
            if ((IsKeyDown(KEY_UP) || IsKeyDown(KEY_W))){
                playerBox.y -= tileSize;
                playerBox.timer = tileSize;
                currentDirection = UP;
            } else if ((IsKeyDown(KEY_DOWN) || IsKeyDown(KEY_S))){
                playerBox.y += tileSize;
                playerBox.timer = tileSize;
                currentDirection = DOWN;
            } else if ((IsKeyDown(KEY_LEFT) || IsKeyDown(KEY_A))){
                playerBox.x -= tileSize;
                playerBox.timer = tileSize;
                currentDirection = LEFT;
            } else if ((IsKeyDown(KEY_RIGHT) || IsKeyDown(KEY_D))){
                playerBox.x += tileSize;
                playerBox.timer = tileSize;
                currentDirection = RIGHT;
            }

            if ((playerBox.y == portals.y1 && playerBox.x == portals.x1 && !playerBox.timer)){
                player.y = portals.y2;
                player.x = portals.x2;
                playerBox.y = portals.y2 + (((currentDirection == UP)*-1) + (currentDirection == DOWN) * tileSize);
                playerBox.x = portals.x2 + (((currentDirection == LEFT)*-1) + (currentDirection == RIGHT) * tileSize);
                playerBox.timer = tileSize;
            } else if((playerBox.y == portals.y2 && playerBox.x == portals.x2 && !playerBox.timer)){
                player.y = portals.y1;
                player.x = portals.x1;
                playerBox.y = portals.y1 + (((currentDirection == UP)*-1) + (currentDirection == DOWN) * tileSize);
                playerBox.x = portals.x1 + (((currentDirection == LEFT)*-1) + (currentDirection == RIGHT) * tileSize);
                playerBox.timer = tileSize;
            } else if (playerBox.y == crateBox.y && playerBox.x == crateBox.x){
                crateBox.timer = tileSize;

                if (playerBox.y != player.y){
                    crateBox.y += IsHigherOrLower(playerBox.y, player.y) * tileSize;
                } else if (playerBox.x != player.x){
                    crateBox.x += IsHigherOrLower(playerBox.x, player.x) * tileSize;
                }

                if (map[crateBox.y/tileSize][crateBox.x/tileSize] == '1'){
                    playerBox.x = player.x;
                    playerBox.y = player.y;
                    playerBox.timer = 0;

                    crateBox.x = crate.x;
                    crateBox.y = crate.y;
                    crateBox.timer = 0;
                }
            } else if (
                (playerBox.y/tileSize) > 0 &&
                (playerBox.y/tileSize) <= rows &&
                (playerBox.x/tileSize) > 0 &&
                (playerBox.x/tileSize) <= cols &&
                map[playerBox.y/tileSize][playerBox.x/tileSize] == '1'
            ){
                playerBox.x = player.x;
                playerBox.y = player.y;
                playerBox.timer = 0;
                currentDirection = NONE;
            }
        }

        if (playerBox.timer > 0){
            if (player.y != playerBox.y){
                player.y += IsHigherOrLower(playerBox.y, player.y) * player.speed;
            } else if (player.x != playerBox.x){
                player.x += IsHigherOrLower(playerBox.x, player.x) * player.speed;
            }
            playerBox.timer -= player.speed;
        } else if (playerBox.timer <= 0 && (player.y != playerBox.y || player.x != playerBox.x)){
            player.y = playerBox.y;
            player.x = playerBox.x;
            playerBox.timer = 0;
            currentDirection = NONE;
        }

        if (crateBox.timer > 0){
            if (crate.y != crateBox.y){
                crate.y += IsHigherOrLower(crateBox.y, crate.y) * crate.speed;
            } else if (crate.x != crateBox.x){
                crate.x += IsHigherOrLower(crateBox.x, crate.x) * crate.speed;
            }
            crateBox.timer -= crate.speed;
        }

        EndMode2D();
        EndDrawing();
    }

    UnloadTexture(texture);
    CloseWindow();
    return 0;
}